<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Devex Tech Blog]]></title>
  <link href="http://devex.github.io/atom.xml" rel="self"/>
  <link href="http://devex.github.io/"/>
  <updated>2015-07-16T07:14:17-04:00</updated>
  <id>http://devex.github.io/</id>
  <author>
    <name><![CDATA[Devex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Upgrade When Stuck With Unsupported Ubuntu Releases]]></title>
    <link href="http://devex.github.io/blog/2015/02/16/ubuntu-eol-upgrades/"/>
    <updated>2015-02-16T10:02:50-05:00</updated>
    <id>http://devex.github.io/blog/2015/02/16/ubuntu-eol-upgrades</id>
    <content type="html"><![CDATA[<p>Have you ever updated your servers?
I trust most of you have.
Anyway, from time to time one finds an unsupported release, running on some forgotten server.
In some cases, it&rsquo;s an unused service or something to be decommissioned, but sometimes, we should update it.
At <a href="https://www.devex.com">Devex</a>, found this situation recently.
You&rsquo;ll find in this article how we upgraded some cases we couldn&rsquo;t decommission.</p>

<!-- more -->


<h2>Common aspects</h2>

<p>Our infrastructure is running on AWS EC2, so we take a lot of profit from the ability to create AMI images from running instances.
With this approach, we could use those images to try out the upgrade without affecting the instances.
Of course, this implies that data might be outdated, which can be fixed easily by reloading a backup from the correct instance, or by using the same procedure on the running instance later.</p>

<p>Also, the usage of ephemeral drive mounted on <code>/mnt</code> is a good place to store backups and files we would need to save during the process.</p>

<h2>Upgrading from Intrepid</h2>

<p>Our first case was upgrade an Intrepid Ubuntu server, running Postgres 8.3, to Lucid.
We chose to stay in Lucid because this application is going to be decommissioned soon, anyway.
However, this decommission won&rsquo;t happen immediately, since these features must be implemented in newer applications.
So, the first step was getting a backup from the PostgreSQL database, running these commands:</p>

<pre><code>sudo mkdir -p /mnt/postgresql
sudo chown -R postgres:postgres /mnt/postgresql
sudo -u postgres pg_dumpall &gt; /mnt/postgresql/backup
</code></pre>

<p>Once the backup was saved, we upgraded intrepid packages.
Of course the original Intrepid package repositories are down already, but we could take use of the <code>old-release</code> repositories.
To select them, we used the following commands:</p>

<pre><code>sudo cat &gt;/etc/apt/sources.list &lt;&lt;EOL
deb http://old-releases.ubuntu.com/ubuntu/ intrepid main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ intrepid-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ intrepid-security main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ intrepid-backports main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ intrepid-proposed main restricted universe multiverse
EOL
sudo apt-get update
sudo apt-get upgrade
</code></pre>

<p>With these commands, we got an updated Intrepid release, so our following step was upgrade to Jaunty, by issuing the following commands:</p>

<pre><code>sudo perl -p -i.intrepid -e 's/intrepid/jaunty/' /etc/apt/sources.list
sudo apt-get update
sudo apt-get install update-manager-core
sudo apt-get upgrade
sudo reboot
</code></pre>

<p>After the reboot, we got a Jaunty, so next step is upgrading to Karmic, and Lucid:</p>

<pre><code>sudo perl -p -i.jaunty -e 's/jaunty/karmic/' /etc/apt/sources.list
sudo apt-get update
sudo apt-get upgrade
sudo do-release-upgrade -f DistUpgradeViewNonInteractive
sudo reboot
</code></pre>

<p>Karmic was the first release on which we could use <code>do-release-upgrade</code>.
In that case, we used the <code>-f DistUpgradeViewNonInteractive</code> option to have the release upgrade done without user intervention.
After that reboot, the OpenSSH server upgrade updated the host fingerprints, so we needed to change our <code>.ssh/known_hosts</code> removing the old one, before reconnecting.
Then, the final step was resetting the PostgreSQL cluster, issuing the following commands as the <code>postgres</code> user:</p>

<pre><code>pg_dropcluster --stop 8.4 main
pg_createcluster -u postgres -d /data/postgresql/8.4/main 8.4 main
service postgresql-8.4 start
psql -f /data/postgresql/backup postgres
</code></pre>

<p>Finally, after checking everything is in place, we just could remove the old cluster and setup:</p>

<pre><code>sudo rm -rf /data/postgresql/8.3 /etc/postgresql/8.3
</code></pre>

<h2>Upgrading from Maverick</h2>

<p>In that case we could upgrade to Precise, since Trusty just broke the boot process.
The first step was pretty similar, since Maverick package repositories are also outdated:</p>

<pre><code>sudo bash -c "cat &gt;/etc/apt/sources.list &lt;&lt;EOF
deb http://old-releases.ubuntu.com/ubuntu/ maverick main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ maverick-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ maverick-security main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ maverick-backports main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ maverick-proposed main restricted universe multiverse
EOF
"
sudo apt-get update
sudo apt-get upgrade
sudo do-release-upgrade -f DistUpgradeViewNonInteractive
sudo reboot
</code></pre>

<p>After the reboot, we got a Natty release running, so updating to Oneiric was the next step. Pretty much the same:</p>

<pre><code>sudo do-release-upgrade -f DistUpgradeViewNonInteractive
sudo reboot
</code></pre>

<p>In our case, the application running here was a little bit sensible to automatic removal of packages for Precise upgrade.
So in the following step, we couldn&rsquo;t use the unattended mode of <code>do-release-upgrade</code>:</p>

<pre><code>sudo do-release-upgrade
</code></pre>

<p>When manually running the <code>do-release-upgrade</code>, we just ommitted the old package removal part.
After the reboot, issued from the <code>do-release-upgrade</code>, we got a working Precise release running.</p>

<h2>Details</h2>

<p>In first place, we&rsquo;d like to point the great importance of having backups and images for the instances.
With the backups, preferably dumps, you&rsquo;ll be able to recover the data for your databases.
Of course, if the application running on the affected instances are not in the same server, then you&rsquo;ll need to face the client libraries updating and possible version differences that might appear.
Here&rsquo;s where having the server images might help.
We took static images for having the servers upgrade procedures ready.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance Issues With Rails and VirtualBox]]></title>
    <link href="http://devex.github.io/blog/2015/02/06/performance-issues-with-rails-and-virtualbox/"/>
    <updated>2015-02-06T06:02:50-05:00</updated>
    <id>http://devex.github.io/blog/2015/02/06/performance-issues-with-rails-and-virtualbox</id>
    <content type="html"><![CDATA[<p>Two weeks ago, we noticed some performance issues with Rails in our development setup, while all our other environments, some much less powerful, were working with much better performance.
After confirming that no recent change caused this slow-down, and running some diagnostics and measurements to record the performance in some point, this took us on a small trip into some Ruby on Rails debugging on a VirtualBox.</p>

<!-- more -->


<h2>Our development setup</h2>

<p>Most of us at Devex, we use a specific setup of our apps into a <a href="https://www.virtualbox.org">VirtualBox</a> machine so we can hold a local development version of our site and check how the new features integrate before to give the work as done.
In some cases, for feature availability, performance, and workstation power reasons, these apps, and their components run completely on this environment, but in other cases, we don&rsquo;t run all the components in the virtual machine and we do use some components from the staging (we call it develop) environment, which is quite approximate to what we need.
So this development environment&rsquo;s architecture and infrastructure is quite different from the ones we have in staging, pre-production, and, of course, production.</p>

<p>Not only that, in all our other environments, we run the apps using <a href="http://unicorn.bogomips.org/">Unicorn</a> as a daemon, with more or less workers, while in this development environment, we run <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/webrick/rdoc/WEBrick.html">WEBrick</a> within a screen session, just to simplify the load.</p>

<h2>The problem arises</h2>

<p>The problem arose when we noticed Rails was underperforming when running in the local development setup.
Some measurements were taken showing up that the problem seemed to be located in our front-end application, since the back-end was running properly:</p>

<pre><code>$ time wget -pq --no-cache --delete-after http://localhost:3002/apps/front_end/api/system/health
real    0m0.523s
user    0m0.000s
sys 0m0.000s

$ time wget -pq --no-cache --delete-after http://localhost:3004/public/system/health
real    0m0.019s
user    0m0.000s
sys 0m0.000s
</code></pre>

<p>These two URIs produce more or less identical content, JSON-formatted status info regarding our front-end and back-end applications, respectively.
So, another measurement was done, which consisted into measuring the time to serve one complete page:</p>

<pre><code>$ time wget -pq --no-cache --delete-after http://localhost:3002/people
real    0m13.393s
user    0m0.008s
sys 0m0.032s
</code></pre>

<p>Looking for similar cases on Internet, we found some links related to <a href="http://stackoverflow.com/questions/1156759/webrick-is-very-slow-to-respond-how-to-speed-it-up">WEBrick performance improvements</a>, <a href="http://stackoverflow.com/questions/8670080/rails-3-1-on-ubuntu-11-10-under-virtualbox-very-slow">Rails performance within VirtualBox</a>, and <a href="http://www.visionfactory.com.au/blog/rails_dev_with_webrick_really_slow_in_a_">WEBrick reverse lookups</a>.</p>

<p>None of the solutions we tried from these links helped to find the solution.
We then tried doubling processors and memory available in the VM configuration, but it didn&rsquo;t solved the issue.
Measuring with <code>atop</code> showed no bottleneck.
Reproducibility of the issue in other computers and setups was also checked, so it was not something related to the specific setup or the hardware on which it was relying.</p>

<h2>What&rsquo;s going on then?</h2>

<p>Then, we started analizing the issue in some more depth, first taking a look on what was going on when the browser issued a request.
So, using the Network view in the web inspector, we saw very long waiting times for static content, but the rest of the times were ok, no execution issues or so.</p>

<p>Next step was taking a closer look to the log to see what would be happening when Rails received the static requests.
We could confirm that the logs were written much more slowly when serving static files. So we decided to trace the WEBrick process.</p>

<p>When we <code>strace</code>&rsquo;d the WEBrick process, we couldn&rsquo;t see anything meaningful, but then we learned WEBrick is threaded, so the actual requests where being attended by threads, which traces were not showed in the <code>strace</code> output.</p>

<p>The trick to <a href="http://superuser.com/questions/80556/how-do-you-view-all-threads-running-on-linux">identify the thread TIDs</a> is to run the <code>ps</code> command with the <code>-T</code> option, which lists also the threads as processes, with the corresponding id.
Then you can <a href="http://stackoverflow.com/questions/7698209/tracing-pthreads-in-linux">run <code>strace</code> on those TIDs</a>.
Finally we started to see errors on unavailable resources.
We searched again and <a href="http://mitchellh.com/comparing-filesystem-performance-in-virtual-machines">found out</a> that VirtualBox uses a specific filesystem for the shared folders, with some performance problems, and that NFS is one of the fastest ones you can use.</p>

<h2>The fix</h2>

<p>Some of us, simply copied the shared folder content to be used to a regular directory in the VM disk.
This fixes the issue, but introduces the need to keep copying the content when it gets updated.</p>

<p>Some others of us, decided to go for NFS, which has a couple of drawbacks:</p>

<ul>
<li>It is not compliant with having a Windows host, but this is not our case.</li>
<li><p>It requires a LAN to be setup between the host and the guest, but we solved the whole problem by adding the following to our Vagrantfile:</p>

<pre><code>ip = ENV['VMSETUP_IP'] || `vboxmanage list hostonlyifs | grep IPAddress | cut -d: -f2 | tr -d ' '`.to_s.tr("\n", "") + '0'
[...]
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  [...]
  config.vm.network :private_network, ip: "#{ip}"
  [...]
  config.vm.synced_folder ".", "/vagrant", type: "nfs"
  [...]
end
</code></pre></li>
</ul>


<p>By the way, the final measurements are as follows:</p>

<pre><code>$  time wget -pq --no-cache --delete-after http://localhost:3004/public/system/health

real 0m0.016s
user 0m0.000s
sys 0m0.004s

$ time wget -pq --no-cache --delete-after http://localhost:3002/apps/front_end/api/system/health

real 0m0.066s
user 0m0.000s
sys 0m0.006s

$ time wget -pq --no-cache --delete-after http://localhost:3002/people

real 0m1.661s
user 0m0.012s
sys 0m0.026s
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friday Links]]></title>
    <link href="http://devex.github.io/blog/2015/01/23/friday-links/"/>
    <updated>2015-01-23T08:54:24-05:00</updated>
    <id>http://devex.github.io/blog/2015/01/23/friday-links</id>
    <content type="html"><![CDATA[<p>Here are some accumulated links we&rsquo;ve been passing around recently&hellip;</p>

<!-- more -->


<ul>
<li><a href="https://hbr.org/2014/12/a-testable-idea-is-better-than-a-good-idea">A testable idea is better than a good idea</a></li>
<li><a href="https://hbr.org/2015/01/to-make-money-with-digital-be-an-innovator-not-a-strategist">To make money with digital be an innovator not a strategist</a></li>
<li><a href="http://www.slideshare.net/innovgames/why-buy-a-feature-is-great-at-prioritizing-features">Buy a feature</a></li>
<li><a href="http://www.forbes.com/sites/rawnshah/2015/01/14/the-facebook-elephant-has-stepped-into-the-office/">The Facebook Elephant Has Stepped Into The Office</a></li>
<li><a href="http://analytics.blogspot.de/2015/01/simplify-your-google-analytics.html">Simplify your Google Analytics Reporting with Add-ons for Google Sheets</a></li>
<li><a href="https://www.youtube.com/watch?v=aD9mZDJzb58&amp;">Stochastic Optimization for x86 Binaries</a></li>
<li><a href="http://www.quirksmode.org/blog/archives/2015/01/the_problem_wit.html">The problem with Angular</a></li>
<li><a href="https://github.com/blog/1939-how-github-uses-github-to-document-github">How GitHub uses GitHub to document GitHub</a></li>
<li><a href="http://qualityisspeed.blogspot.com.es/2014/08/why-i-dont-teach-solid.html">Why I Don&rsquo;t Teach SOLID</a></li>
<li><a href="https://developer.atlassian.com/blog/2015/01/a-better-pull-request/">A better pull request</a></li>
<li><a href="https://github.com/blog/1943-how-to-write-the-perfect-pull-request">How to write the perfect pull request</a></li>
<li><a href="http://thoughts.codegram.com/cleaner-safer-ruby-api-clients-with-kleisli/">Cleaner, safer Ruby API clients with Kleisli</a></li>
<li><a href="https://modelviewculture.com/pieces/on-learn-to-code">On &ldquo;Learn to Code&rdquo; - Should industry be allowed to dictate our school curriculums?</a></li>
<li><a href="http://youtu.be/e3vuCY1u9gc">Building a Product Backlog from Scratch</a></li>
<li><a href="http://signalvnoise.com/posts/3838-strategies-for-getting-feedback-and-not-hating-it">Strategies for getting feedback (and not hating it)</a></li>
<li><a href="http://www.brucelawson.co.uk/2015/why-we-cant-do-real-responsive-images-with-css-or-javascript/">Why we can’t do real responsive images with CSS or JavaScript</a></li>
<li><a href="http://highscalability.com/blog/2015/1/21/learn-from-my-pain-5-lessons-from-ellos-adventures-in-rapid.html">Learn from my pain - 5 Lessons from Ello&rsquo;s Adventures in Rapid Scaling</a></li>
<li><a href="https://aws.amazon.com/blogs/aws/new-auto-recovery-for-amazon-ec2/">New – Auto Recovery for Amazon EC2</a></li>
<li><a href="http://zachholman.com/posts/how-github-writes-blog-posts/">How GitHub Writes Blog Posts</a></li>
<li><a href="http://samy.pl/keysweeper/">Keysweeper</a></li>
<li><a href="http://blog.codinghorror.com/the-god-login/">The God Login</a></li>
<li><a href="https://lwn.net/Articles/628542/">Revert &ldquo;cfg80211: make WEXT compatibility unselectable&rdquo;</a></li>
<li><a href="http://blogs.atlassian.com/2015/01/sprint-planning-atlassian/">Sprint planning at Atlassian: How we do it</a></li>
<li><a href="http://jobs.rubynow.com/blog/11-1-behind-the-scenes-story-of-the-team-and-rails-platform-behind-kickstarter">Behind-the-Scenes Story of the Team and Rails Platform Behind Kickstarter</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Devex NewsLab: Using Google Docs as a CMS]]></title>
    <link href="http://devex.github.io/blog/2015/01/12/the-devex-newslab-using-google-docs-as-a-cms/"/>
    <updated>2015-01-12T07:00:00-05:00</updated>
    <id>http://devex.github.io/blog/2015/01/12/the-devex-newslab-using-google-docs-as-a-cms</id>
    <content type="html"><![CDATA[<p>This article describes our current content management solution and gives some insight on the parts of the implementation we think are interesting.</p>

<p>As you might know a big part of our website is dedicated to <a href="https://www.devex.com/news">News content covering various aspects of international development</a>.
At Devex we usually publish around 10 articles per day which are sometimes planned and worked on several days or even weeks in advance.
There are different people involved in the process including both internal and external writers, editors, researchers or marketing folks.
Some of them contribute to the article&rsquo;s content while others just need to be aware what is going on to coordinate their own work like social media campaigns.</p>

<!-- more -->


<h2>Where we come from</h2>

<p>Editors maintained individual spreadsheets to schedule and coordinate the work of several writers.
These spreadsheets contained article meta data like estimated publication date, category, assigned persons or the newsletter this article should appear in.
A writer would work on an assigned article as a Word document and send the draft to editors or collaborating writers.
Changes were made to the article, a new version was saved (e.g. <code>awesome_article_v7.doc</code>) and sent again via email.
I guess I don&rsquo;t have to elaborate on the downsides of this workflow - just think briefly about transparency, revision control or the overhead of individual email and file organization&hellip;</p>

<p>Once an article reached a &ldquo;to be published&rdquo; state the editor would send it to one of our web publishers who then would extract and upload the images to Amazon S3, copy the content to a web-based CMS and format it (TinyMCE).
If everything goes well, the article could be published and would appear on the website.
Any further editorial changes or fixes needed to be done in the web CMS.
Again I think that the pitfalls of this publishing workflow are obvious (steps that are repeated manually up to 10 times a day, lack of transparency, data inconsistency and so forth).</p>

<h2>Where we figured we should be</h2>

<p>When we sat down to think about requirements of a new solution, we came up with the following:</p>

<ul>
<li>Everyone needs easy access to the article content in progress</li>
<li>Everyone should be able to publish an article (i.e. decrease the overhead)</li>
<li>Any change to the article content needs to be recorded (revision history)</li>
<li>One general overview of all articles being worked on</li>
<li>Transparency regarding the assignments or estimated publication dates</li>
<li>Improved task overview for individuals (i.e. personalized task list)</li>
<li>Each step of the workflow should be accessible as a mobile-friendly version</li>
<li>Unify the look and feel of an article&rsquo;s presentation on the website</li>
<li>Writers and editors shouldn&rsquo;t need to know HTML or CSS</li>
</ul>


<p>While regarding several CMS solutions we stumbled upon a
<a href="https://docs.google.com/fileview?id=0B5Y-fwYJF2hLNzM5ZTIwODMtNzgwOS00MzYyLWE0MTYtMDJlNTBjYjZmMzMy">Google Apps case study about the Huffington Post</a>
which states that their blog and editorial teams use Google Docs for collaboration and share editorial calendars.
Giving this some thought it seemed like the perfect solution:</p>

<ul>
<li>Editors and writers can work with a &ldquo;Word-like&rdquo; UI they are used to</li>
<li>All changes are saved instantly in the cloud and each document has it&rsquo;s own revision history</li>
<li>Sharing and access management is fairly easy, no more email attachments!</li>
<li>Google Docs can be exported to HTML or ODF (i.e. XML), so the content can be processed by an external app</li>
<li>By using shared calendar events every person gets his personal agenda</li>
<li>There are official mobile applications from Google for editing documents or checking your calendar</li>
</ul>


<p>Great, what are we waiting for, let&rsquo;s do it!</p>

<h2>How we got there</h2>

<p>The first problem we encountered was pretty obvious: We are not using Google Apps!
So migrating our roughly 120 users to Google Apps was the first step (which was considered for some time anyway).
I spare you the details&hellip;</p>

<p>To give our News team an idea of how they would be working in the future we put together a prototype using various Google services:
A group for the editorial staff, a metadata spreadsheet, some calendars and a folder for articles.
All tied together by a simple Google site and a web application written in Google Apps Script.
This prototype was far from perfect as it was rather slow and the final article still had to be copied manually in order to be published.
Also the spreadsheet was not providing the level of overview we had in mind.
But we were able to get early feedback from the writers and editors and also gain valuable experience with the Google Apps ecosystem.</p>

<p>The next step was to link the Ruby application powering our website to the Google services.
This integration is currently based on three different types of communication with Google APIs:</p>

<ul>
<li><strong>Manage documents</strong>: As soon as someone creates an article on our website an API call to Google Drive creates a corresponding document.
The unique document Id is then stored with the article object in our database.</li>
<li><strong>Manage calendar events</strong>: Each article can have a deadline (when it should be completed by the writer) and an estimated publication date.
An API call creates these events in a specific Google calendar and sends invites to the people who work on the article (assignees, editors &amp; watchers).
In case the dates change (e.g. an article is postponed) the calendar events are updated accordingly.</li>
<li><strong>Process the content</strong>: For each article there&rsquo;s a button on our website called &ldquo;Pull latest Content from Google&rdquo;.
Clicking it does exactly what it says, it grabs an HTML export of the document, processes it and saves a clean HTML snippet that can be displayed on our site.
The processing detects various elements like images, video (YouTube &amp; Vimeo) or slideshow links, alignments, quotes or headings.
For example have a look at <a href="https://docs.google.com/document/d/10pXRPT9J4VzvfdR5vSj4-NJWfHVRwkGAdSn7S4Ew-xQ/edit?usp=sharing">this document</a> which results in <a href="https://www.devex.com/news/kennedy-johnson-and-the-early-years-83339">this article</a>.
The content processing is continuously tested using a reference document to detect changes in the HTML structure provided by Google.</li>
</ul>


<p>Apart from the integration with Google the application has some additional features like notifications for writers, editors and watchers.
It also provides the general overview via filterable list and calendar views.</p>

<p>So far we are really happy with our new CMS although we have heaps of improvements in our Backlog.
Since we deployed it 10 months ago over 2,200 articles were created and published.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Holiday Links!]]></title>
    <link href="http://devex.github.io/blog/2015/01/08/holiday-links/"/>
    <updated>2015-01-08T04:23:34-05:00</updated>
    <id>http://devex.github.io/blog/2015/01/08/holiday-links</id>
    <content type="html"><![CDATA[<p>We hope you had nice and happy holidays! Here&rsquo;s some of the things Devexers have
been reading during the last weeks&hellip;</p>

<!-- more -->


<ul>
<li><a href="http://weblog.rubyonrails.org/2015/1/6/Rails-4-1-9-and-4-0-13-have-been-released/">Rails 4.1.9 and 4.0.13 have been released!</a></li>
<li><a href="https://blog.twitter.com/2015/introducing-practical-and-robust-anomaly-detection-in-a-time-series">Twitter: Introducing practical and robust anomaly detection in a time series</a></li>
<li><a href="https://www.kickstarter.com/backing-and-hacking/engineering-year-in-review-2014">Kickstarter: Engineering Year in Review 2014</a></li>
<li><a href="https://www.youtube.com/watch?v=b_855b7DRJY&amp;">Etsy: Raffi Krikorian - Every Problem is a Scaling Problem - Dec. 17, 2014</a></li>
<li><a href="http://www.brandonsavage.net/the-pitfalls-of-code-review-and-how-to-fix-them/">The Pitfalls of Code Review (And How To Fix Them)</a></li>
<li><a href="http://calendar.perfplanet.com/2014/simplify-speed-with-the-halt-number/">Simplify speed with the HALT number</a></li>
<li><a href="http://calendar.perfplanet.com/2014/the-power-of-perceived-performance/">The Power of Perceived Performance</a></li>
<li><a href="http://weblog.rubyonrails.org/2014/12/19/Rails-4-2-final/">Rails 4.2: Active Job, Asynchronous Mails, Adequate Record, Web Console, Foreign Keys</a></li>
<li><a href="https://codeascraft.com/2014/12/22/engineering-rotation/">We Invite Everyone at Etsy to Do an Engineering Rotation: Here’s why</a></li>
<li><a href="http://calendar.perfplanet.com/2014/the-changing-role-of-the-browser-cache/">The changing role of the browser cache</a></li>
<li><a href="https://t37.net/is-docker-ready-for-production-feedbacks-of-a-2-weeks-hands-on.html">Is Docker ready for production? Feedbacks of a 2 weeks hands on</a></li>
<li><a href="http://awardwinningfjords.com/2012/12/30/dont-fork.html">Don&rsquo;t Fork</a></li>
<li><a href="https://www.youtube.com/watch?v=eNliOm9NtCM">How Google Backs Up the Internet</a></li>
<li><a href="http://rubini.us/2014/12/31/matz-s-ruby-developers-don-t-use-rubyspec/">Matz&rsquo;s Ruby Developers Don&rsquo;t Use RubySpec and It&rsquo;s Hurting Ruby</a></li>
<li><a href="http://aeon.co/magazine/psychology/why-broken-sleep-is-a-golden-time-for-creativity/">Broken Sleep</a></li>
<li><a href="http://m.theatlantic.com/magazine/archive/2015/01/does-global-warming-make-me-look-fat/383509/?single_page=true">The Benefits of Being Cold (one more reason to keep the heating off, girls of the BCN office!)</a></li>
<li><a href="http://www.slate.com/articles/news_and_politics/foreigners/2014/12/the_world_is_not_falling_apart_the_trend_lines_reveal_an_increasingly_peaceful.single.html">The World Is Not Falling Apart</a></li>
<li><a href="http://www.bennadel.com/blog/2439-my-experience-with-angularjs-the-super-heroic-javascript-mvw-framework.htm">My experience with AngularJS, - The Super- heroic Javascript MVW Framework</a></li>
<li><a href="http://www.schneems.com/2014/12/15/hashie-considered-harmful.html">Hashie Considered Harmful - An Ode to Hash and OpenStruct</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accumulated Christmas Friday Links]]></title>
    <link href="http://devex.github.io/blog/2014/12/19/accumulated-friday-links/"/>
    <updated>2014-12-19T07:55:58-05:00</updated>
    <id>http://devex.github.io/blog/2014/12/19/accumulated-friday-links</id>
    <content type="html"><![CDATA[<p><img src="http://gifs.joelglovier.com/will-ferrell/elevator-christmas-tree.gif" alt="Merry Christmas!" /></p>

<h2>December 12th</h2>

<ul>
<li><a href="http://martinfowler.com/articles/replaceThrowWithNotification.html">Replacing Throwing Exceptions with Notification in Validations</a></li>
<li><a href="http://pudo.org/blog/2014/12/03/newsclipse.html">What if journalists had story writing tools as powerful as those used by coders?</a></li>
<li><a href="https://medium.com/@andrey_cheptsov/top-20-navigation-features-in-intellij-idea-ed8c17075880">Top 20 Navigation Features in IntelliJ IDEA (Most of it should work for RubyMine as well)</a></li>
<li><a href="http://www.paperplanes.de/2014/12/10/from-open-to-minimum-vacation-policy.html">From Open (Unlimited) to Minimum Vacation Policy</a></li>
<li><a href="https://codeascraft.com/2014/12/11/make-performance-part-of-your-workflow/">Make Performance Part of Your Workflow</a></li>
<li><a href="http://calendar.perfplanet.com/2014/the-pain-of-duplicate-scripts/">The Pain of Duplicate Scripts</a></li>
<li><a href="http://www.tedunangst.com/flak/post/random-in-the-wild">random in the wild (via lwn) &ldquo;Younger programmers prefer srand48.&rdquo;</a></li>
</ul>


<h2>December 19th</h2>

<ul>
<li><a href="https://blog.docker.com/2014/12/dockercon-europe-keynote-state-of-the-art-in-microservices-by-adrian-cockcroft-battery-ventures/">State of the Art in Microservices (DockerCon EU Keynote)</a></li>
<li><a href="http://www.postgresql.org/about/news/1557/">PostgreSQL 9.4 released</a></li>
<li><a href="http://www.thoughtworks.com/conferences/rethink-dallas-2014">Three talks from the Rethink Conference</a></li>
<li><a href="http://highscalability.com/blog/2014/12/17/the-big-problem-is-medium-data.html">The Big Problem is Medium Data</a></li>
<li><a href="http://calendar.perfplanet.com/2014/async-fragments-rediscovering-progressive-html-rendering-with-marko/">Async Fragments: Rediscovering Progressive HTML Rendering with Marko</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friday Links - December 5th]]></title>
    <link href="http://devex.github.io/blog/2014/12/09/friday-links-december-5th/"/>
    <updated>2014-12-09T04:41:03-05:00</updated>
    <id>http://devex.github.io/blog/2014/12/09/friday-links-december-5th</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://www.schneier.com/blog/archives/2014/12/corporations_mi.html">Schneier: Corporations Misusing Our Data</a></li>
<li><a href="https://codeascraft.com/2014/12/04/juggling-multiple-elasticsearch-instances-on-a-single-host/">Etsy: Juggling Multiple Elasticsearch Instances on a Single Host</a></li>
<li><a href="http://calendar.perfplanet.com/2014/http-2-0-is-coming-be-ready/">Performance Calendar: HTTP 2.0 is coming, be ready</a></li>
<li><a href="http://oobrien.com/2014/12/all-the-tweets/">Suprageography: All the Tweets</a></li>
<li><a href="https://github.com/blog/1933-introducing-organization-webhooks">Github: Introducing organization webhooks (finally)</a></li>
<li><a href="http://googlewebmastercentral.blogspot.com.es/2014/12/are-you-robot-introducing-no-captcha.html">Google: Are you a robot? Introducing “No CAPTCHA reCAPTCHA”</a></li>
<li><a href="http://randsinrepose.com/archives/the-qa-mindset">Rand: The QA Mindset</a></li>
<li><a href="https://aws.amazon.com/blogs/aws/simplified-reserved-instances/">AWS: Simplifying the EC2 Reserved Instance Model</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friday Links - November 28th]]></title>
    <link href="http://devex.github.io/blog/2014/12/02/friday-links-november-28th/"/>
    <updated>2014-12-02T10:26:10-05:00</updated>
    <id>http://devex.github.io/blog/2014/12/02/friday-links-november-28th</id>
    <content type="html"><![CDATA[<p>Here are last week&rsquo;s Friday Links. Enjoy!</p>

<ul>
<li><a href="http://www.meetup.com/Barcelona-Free-Software-Users-Hackers/events/218591509/">Meetup in Barcelona: A story about tanks, the UN and Python</a></li>
<li><a href="http://blog.codinghorror.com/because-reading-is-fundamental-2/">coding horror: Because Reading is Fundamental</a></li>
<li><a href="https://www.mattcutts.com/blog/premortem/">Matt Cutts: Premortems</a></li>
<li><a href="http://www.brucelawson.co.uk/2014/device-detection-responsive-web-design/">Device Detection vs Responsive Web Design</a></li>
<li><a href="http://samsaffron.com/archive/2014/12/01/speeding-up-rails-4-2">Speeding up Rails 4.2</a></li>
<li><a href="http://news.sciencemag.org/funding/2014/11/gates-foundation-require-immediate-free-access-journal-articles">Gates Foundation to require immediate free access for journal articles</a></li>
<li><a href="http://www.enterprisetech.com/2014/11/14/rare-peek-massive-scale-aws/">A Rare Peek Into The Massive Scale of AWS</a></li>
<li><a href="https://www.omniref.com/blog/blog/2014/11/18/ko1-at-rubyconf-2014-massive-garbage-collection-speedup-in-ruby-2-dot-2/">Ko1 at RubyConf 2014: Massive Garbage Collection Speedup in Ruby 2.2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One in a `has_many` - Access Special Association Objects in ActiveRecord]]></title>
    <link href="http://devex.github.io/blog/2014/11/24/one-in-a-has-many-access-special-association-objects-in-activerecord/"/>
    <updated>2014-11-24T09:12:48-05:00</updated>
    <id>http://devex.github.io/blog/2014/11/24/one-in-a-has-many-access-special-association-objects-in-activerecord</id>
    <content type="html"><![CDATA[<p>ActiveRecord models that define a <code>has_many</code> association often need access to a
specific entry of this list. Think of an user that has many email addresses but
only one that is his primary address. Or a Blog post with many comments of which
one is featured.</p>

<!-- more -->


<h2>How a lot of people do it</h2>

<p>A pattern that seems to be quite common is to
<a href="http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#module-ActiveRecord::Associations::ClassMethods-label-Association+extensions">extend the association by implementing a method that gets you the specific record</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:emails</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">primary</span>
</span><span class='line'>      <span class="n">find</span><span class="p">(</span><span class="ss">:first</span><span class="p">,</span> <span class="ss">conditions</span><span class="p">:</span> <span class="s1">&#39;is_primary&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows you to access the user&rsquo;s primary email address via <code>#emails.primary</code>.
So far so good, but what happens if we need to get a list of users with their
primary email address? Of course we do eager loading to reduce the amount of
database queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span>
</span><span class='line'>  <span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:emails</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span> <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">u</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">u</span><span class="o">.</span><span class="n">emails</span><span class="o">.</span><span class="n">primary</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But when we look at the SQL queries that are actually executed we realize that
eager loading is happening but each primary email is queried separately
afterwards:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;users&quot;</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">IN</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">6</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> <span class="mi">1</span> <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> <span class="mi">2</span> <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> <span class="mi">3</span> <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> <span class="mi">4</span> <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> <span class="mi">5</span> <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">LIMIT</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ouch! This will screw up our app&rsquo;s performance as the user base grows!</p>

<h2>A better way</h2>

<p>But there&rsquo;s another way of picking out one special instance of a <code>has_many</code>
association. A way that also allows eager loading. It&rsquo;s as simple as defining
just another association pointing to the same object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:emails</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:primary_email</span><span class="p">,</span> <span class="ss">class_name</span><span class="p">:</span> <span class="no">Email</span><span class="p">,</span> <span class="ss">conditions</span><span class="p">:</span> <span class="s1">&#39;is_primary&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can access the user&rsquo;s primary email address by <code>#primary_email</code>. Let&rsquo;s
check the SQL log for a user list using eager loading:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span>
</span><span class='line'>  <span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:primary_email</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span> <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">u</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">u</span><span class="o">.</span><span class="n">primary_email</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see eager loading is now working properly for the primary email
addresses:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;users&quot;</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">IN</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yay! Now all the millions of users out there can sign up on our page without
breaking the list of primary email addresses&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friday Links - November 21st]]></title>
    <link href="http://devex.github.io/blog/2014/11/24/friday-links-november-21st/"/>
    <updated>2014-11-24T04:45:03-05:00</updated>
    <id>http://devex.github.io/blog/2014/11/24/friday-links-november-21st</id>
    <content type="html"><![CDATA[<p>Every friday we pass each other some links that we read during the week and deem
worth sharing. Each monday we&rsquo;ll publish that list here on the Blog.</p>

<!-- more -->


<ul>
<li><a href="https://www.schneier.com/blog/archives/2014/11/a_new_free_ca.html">Schneier: New free CA</a></li>
<li><a href="http://googlewebmastercentral.blogspot.de/2014/11/helping-users-find-mobile-friendly-pages.html">Google: Helping users find mobile-friendly pages</a></li>
<li><a href="https://codeascraft.com/2014/11/17/personalized-recommendations-at-etsy/">Personalized Recommendations at Etsy</a></li>
<li><a href="https://www.mattcutts.com/blog/dial-tone-moments/">Matt Cutts: Dial tone moments</a></li>
<li><a href="https://aws.amazon.com/blogs/aws/track-aws-with-config/">Track AWS Resource Configurations With AWS Config</a></li>
<li><a href="https://aws.amazon.com/blogs/aws/code-management-and-deployment/">New AWS Tools for Code Management and Deployment</a></li>
<li><a href="http://weblog.rubyonrails.org/2014/11/19/Rails-4-0-11-1-and-4-1-7-1-have-been-released/">Rails 4.0.11.1 and 4.1.7.1 have been released</a></li>
<li><a href="http://techblog.netflix.com/2014/11/nodejs-in-flames.html">Netflix: Node.js in Flames</a></li>
<li><a href="http://nerds.airbnb.com/maintaining-quality-scale/">Airbnb: Maintaining Quality at Scale</a></li>
<li><a href="http://nerds.airbnb.com/testing-at-airbnb/">Airbnb: Testing</a></li>
<li><a href="http://nerds.airbnb.com/experiments-at-airbnb/">Airbnb: Experiments</a></li>
<li><a href="http://nerds.airbnb.com/openair-algorithmic-pricing/">Airbnb: Algorithmic pricing</a></li>
<li><a href="https://gigaom.com/2014/06/30/the-dark-side-of-io-how-the-u-k-is-making-web-domain-profits-from-a-shady-cold-war-land-deal/">The dark side of .io: How the U.K. is making web domain profits from a shady Cold War land deal</a></li>
<li><a href="https://developer.github.com/guides/traversing-with-pagination/">Traversing with Pagination</a></li>
<li><a href="http://www.theguardian.com/world/2014/nov/09/berlins-digital-exiles-tech-activists-escape-nsa">Berlin’s digital exiles: where tech activists go to escape the NSA</a></li>
<li>7 Rules for Creating Gorgeous UI - <a href="https://medium.com/@erikdkennedy/7-rules-for-creating-gorgeous-ui-part-1-559d4e805cda">Part 1</a> and <a href="https://medium.com/@erikdkennedy/7-rules-for-creating-gorgeous-ui-part-2-430de537ba96">Part 2</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
