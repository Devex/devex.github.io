<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Devex Tech Blog]]></title>
  <link href="http://devex.github.io/atom.xml" rel="self"/>
  <link href="http://devex.github.io/"/>
  <updated>2015-01-12T06:56:06-05:00</updated>
  <id>http://devex.github.io/</id>
  <author>
    <name><![CDATA[Devex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Devex NewsLab: Using Google Docs as a CMS]]></title>
    <link href="http://devex.github.io/blog/2015/01/12/the-devex-newslab-using-google-docs-as-a-cms/"/>
    <updated>2015-01-12T07:00:00-05:00</updated>
    <id>http://devex.github.io/blog/2015/01/12/the-devex-newslab-using-google-docs-as-a-cms</id>
    <content type="html"><![CDATA[<p>This article describes our current content management solution and gives some insight on the parts of the implementation we think are interesting.</p>

<p>As you might know a big part of our website is dedicated to <a href="https://www.devex.com/news">News content covering various aspects of international development</a>.
At Devex we usually publish around 10 articles per day which are sometimes planned and worked on several days or even weeks in advance.
There are different people involved in the process including both internal and external writers, editors, researchers or marketing folks.
Some of them contribute to the article&rsquo;s content while others just need to be aware what is going on to coordinate their own work like social media campaigns.</p>

<!-- more -->


<h2>Where we come from</h2>

<p>Editors maintained individual spreadsheets to schedule and coordinate the work of several writers.
These spreadsheets contained article meta data like estimated publication date, category, assigned persons or the newsletter this article should appear in.
A writer would work on an assigned article as a Word document and send the draft to editors or collaborating writers.
Changes were made to the article, a new version was saved (e.g. <code>awesome_article_v7.doc</code>) and sent again via email.
I guess I don&rsquo;t have to elaborate on the downsides of this workflow - just think briefly about transparency, revision control or the overhead of individual email and file organization&hellip;</p>

<p>Once an article reached a &ldquo;to be published&rdquo; state the editor would send it to one of our web publishers who then would extract and upload the images to Amazon S3, copy the content to a web-based CMS and format it (TinyMCE).
If everything goes well, the article could be published and would appear on the website.
Any further editorial changes or fixes needed to be done in the web CMS.
Again I think that the pitfalls of this publishing workflow are obvious (steps that are repeated manually up to 10 times a day, lack of transparency, data inconsistency and so forth).</p>

<h2>Where we figured we should be</h2>

<p>When we sat down to think about requirements of a new solution, we came up with the following:</p>

<ul>
<li>Everyone needs easy access to the article content in progress</li>
<li>Everyone should be able to publish an article (i.e. decrease the overhead)</li>
<li>Any change to the article content needs to be recorded (revision history)</li>
<li>One general overview of all articles being worked on</li>
<li>Transparency regarding the assignments or estimated publication dates</li>
<li>Improved task overview for individuals (i.e. personalized task list)</li>
<li>Each step of the workflow should be accessible as a mobile-friendly version</li>
<li>Unify the look and feel of an article&rsquo;s presentation on the website</li>
<li>Writers and editors shouldn&rsquo;t need to know HTML or CSS</li>
</ul>


<p>While regarding several CMS solutions we stumbled upon a
<a href="https://docs.google.com/fileview?id=0B5Y-fwYJF2hLNzM5ZTIwODMtNzgwOS00MzYyLWE0MTYtMDJlNTBjYjZmMzMy">Google Apps case study about the Huffington Post</a>
which states that their blog and editorial teams use Google Docs for collaboration and share editorial calendars.
Giving this some thought it seemed like the perfect solution:</p>

<ul>
<li>Editors and writers can work with a &ldquo;Word-like&rdquo; UI they are used to</li>
<li>All changes are saved instantly in the cloud and each document has it&rsquo;s own revision history</li>
<li>Sharing and access management is fairly easy, no more email attachments!</li>
<li>Google Docs can be exported to HTML or ODF (i.e. XML), so the content can be processed by an external app</li>
<li>By using shared calendar events every person gets his personal agenda</li>
<li>There are official mobile applications from Google for editing documents or checking your calendar</li>
</ul>


<p>Great, what are we waiting for, let&rsquo;s do it!</p>

<h2>How we got there</h2>

<p>The first problem we encountered was pretty obvious: We are not using Google Apps!
So migrating our roughly 120 users to Google Apps was the first step (which was considered for some time anyway).
I spare you the details&hellip;</p>

<p>To give our News team an idea of how they would be working in the future we put together a prototype using various Google services:
A group for the editorial staff, a metadata spreadsheet, some calendars and a folder for articles.
All tied together by a simple Google site and a web application written in Google Apps Script.
This prototype was far from perfect as it was rather slow and the final article still had to be copied manually in order to be published.
Also the spreadsheet was not providing the level of overview we had in mind.
But we were able to get early feedback from the writers and editors and also gain valuable experience with the Google Apps ecosystem.</p>

<p>The next step was to link the Ruby application powering our website to the Google services.
This integration is currently based on three different types of communication with Google APIs:</p>

<ul>
<li><strong>Manage documents</strong>: As soon as someone creates an article on our website an API call to Google Drive creates a corresponding document.
The unique document Id is then stored with the article object in our database.</li>
<li><strong>Manage calendar events</strong>: Each article can have a deadline (when it should be completed by the writer) and an estimated publication date.
An API call creates these events in a specific Google calendar and sends invites to the people who work on the article (assignees, editors &amp; watchers).
In case the dates change (e.g. an article is postponed) the calendar events are updated accordingly.</li>
<li><strong>Process the content</strong>: For each article there&rsquo;s a button on our website called &ldquo;Pull latest Content from Google&rdquo;.
Clicking it does exactly what it says, it grabs an HTML export of the document, processes it and saves a clean HTML snippet that can be displayed on our site.
The processing detects various elements like images, video (YouTube &amp; Vimeo) or slideshow links, alignments, quotes or headings.
For example have a look at <a href="https://docs.google.com/document/d/10pXRPT9J4VzvfdR5vSj4-NJWfHVRwkGAdSn7S4Ew-xQ/edit?usp=sharing">this document</a> which results in <a href="https://www.devex.com/news/kennedy-johnson-and-the-early-years-83339">this article</a>.
The content processing is continuously tested using a reference document to detect changes in the HTML structure provided by Google.</li>
</ul>


<p>Apart from the integration with Google the application has some additional features like notifications for writers, editors and watchers.
It also provides the general overview via filterable list and calendar views.</p>

<p>So far we are really happy with our new CMS although we have heaps of improvements in our Backlog.
Since we deployed it 10 months ago over 2,200 articles were created and published.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Holiday Links!]]></title>
    <link href="http://devex.github.io/blog/2015/01/08/holiday-links/"/>
    <updated>2015-01-08T04:23:34-05:00</updated>
    <id>http://devex.github.io/blog/2015/01/08/holiday-links</id>
    <content type="html"><![CDATA[<p>We hope you had nice and happy holidays! Here&rsquo;s some of the things Devexers have
been reading during the last weeks&hellip;</p>

<!-- more -->


<ul>
<li><a href="http://weblog.rubyonrails.org/2015/1/6/Rails-4-1-9-and-4-0-13-have-been-released/">Rails 4.1.9 and 4.0.13 have been released!</a></li>
<li><a href="https://blog.twitter.com/2015/introducing-practical-and-robust-anomaly-detection-in-a-time-series">Twitter: Introducing practical and robust anomaly detection in a time series</a></li>
<li><a href="https://www.kickstarter.com/backing-and-hacking/engineering-year-in-review-2014">Kickstarter: Engineering Year in Review 2014</a></li>
<li><a href="https://www.youtube.com/watch?v=b_855b7DRJY&amp;">Etsy: Raffi Krikorian - Every Problem is a Scaling Problem - Dec. 17, 2014</a></li>
<li><a href="http://www.brandonsavage.net/the-pitfalls-of-code-review-and-how-to-fix-them/">The Pitfalls of Code Review (And How To Fix Them)</a></li>
<li><a href="http://calendar.perfplanet.com/2014/simplify-speed-with-the-halt-number/">Simplify speed with the HALT number</a></li>
<li><a href="http://calendar.perfplanet.com/2014/the-power-of-perceived-performance/">The Power of Perceived Performance</a></li>
<li><a href="http://weblog.rubyonrails.org/2014/12/19/Rails-4-2-final/">Rails 4.2: Active Job, Asynchronous Mails, Adequate Record, Web Console, Foreign Keys</a></li>
<li><a href="https://codeascraft.com/2014/12/22/engineering-rotation/">We Invite Everyone at Etsy to Do an Engineering Rotation: Here’s why</a></li>
<li><a href="http://calendar.perfplanet.com/2014/the-changing-role-of-the-browser-cache/">The changing role of the browser cache</a></li>
<li><a href="https://t37.net/is-docker-ready-for-production-feedbacks-of-a-2-weeks-hands-on.html">Is Docker ready for production? Feedbacks of a 2 weeks hands on</a></li>
<li><a href="http://awardwinningfjords.com/2012/12/30/dont-fork.html">Don&rsquo;t Fork</a></li>
<li><a href="https://www.youtube.com/watch?v=eNliOm9NtCM">How Google Backs Up the Internet</a></li>
<li><a href="http://rubini.us/2014/12/31/matz-s-ruby-developers-don-t-use-rubyspec/">Matz&rsquo;s Ruby Developers Don&rsquo;t Use RubySpec and It&rsquo;s Hurting Ruby</a></li>
<li><a href="http://aeon.co/magazine/psychology/why-broken-sleep-is-a-golden-time-for-creativity/">Broken Sleep</a></li>
<li><a href="http://m.theatlantic.com/magazine/archive/2015/01/does-global-warming-make-me-look-fat/383509/?single_page=true">The Benefits of Being Cold (one more reason to keep the heating off, girls of the BCN office!)</a></li>
<li><a href="http://www.slate.com/articles/news_and_politics/foreigners/2014/12/the_world_is_not_falling_apart_the_trend_lines_reveal_an_increasingly_peaceful.single.html">The World Is Not Falling Apart</a></li>
<li><a href="http://www.bennadel.com/blog/2439-my-experience-with-angularjs-the-super-heroic-javascript-mvw-framework.htm">My experience with AngularJS, - The Super- heroic Javascript MVW Framework</a></li>
<li><a href="http://www.schneems.com/2014/12/15/hashie-considered-harmful.html">Hashie Considered Harmful - An Ode to Hash and OpenStruct</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accumulated Christmas Friday Links]]></title>
    <link href="http://devex.github.io/blog/2014/12/19/accumulated-friday-links/"/>
    <updated>2014-12-19T07:55:58-05:00</updated>
    <id>http://devex.github.io/blog/2014/12/19/accumulated-friday-links</id>
    <content type="html"><![CDATA[<p><img src="http://gifs.joelglovier.com/will-ferrell/elevator-christmas-tree.gif" alt="Merry Christmas!" /></p>

<h2>December 12th</h2>

<ul>
<li><a href="http://martinfowler.com/articles/replaceThrowWithNotification.html">Replacing Throwing Exceptions with Notification in Validations</a></li>
<li><a href="http://pudo.org/blog/2014/12/03/newsclipse.html">What if journalists had story writing tools as powerful as those used by coders?</a></li>
<li><a href="https://medium.com/@andrey_cheptsov/top-20-navigation-features-in-intellij-idea-ed8c17075880">Top 20 Navigation Features in IntelliJ IDEA (Most of it should work for RubyMine as well)</a></li>
<li><a href="http://www.paperplanes.de/2014/12/10/from-open-to-minimum-vacation-policy.html">From Open (Unlimited) to Minimum Vacation Policy</a></li>
<li><a href="https://codeascraft.com/2014/12/11/make-performance-part-of-your-workflow/">Make Performance Part of Your Workflow</a></li>
<li><a href="http://calendar.perfplanet.com/2014/the-pain-of-duplicate-scripts/">The Pain of Duplicate Scripts</a></li>
<li><a href="http://www.tedunangst.com/flak/post/random-in-the-wild">random in the wild (via lwn) &ldquo;Younger programmers prefer srand48.&rdquo;</a></li>
</ul>


<h2>December 19th</h2>

<ul>
<li><a href="https://blog.docker.com/2014/12/dockercon-europe-keynote-state-of-the-art-in-microservices-by-adrian-cockcroft-battery-ventures/">State of the Art in Microservices (DockerCon EU Keynote)</a></li>
<li><a href="http://www.postgresql.org/about/news/1557/">PostgreSQL 9.4 released</a></li>
<li><a href="http://www.thoughtworks.com/conferences/rethink-dallas-2014">Three talks from the Rethink Conference</a></li>
<li><a href="http://highscalability.com/blog/2014/12/17/the-big-problem-is-medium-data.html">The Big Problem is Medium Data</a></li>
<li><a href="http://calendar.perfplanet.com/2014/async-fragments-rediscovering-progressive-html-rendering-with-marko/">Async Fragments: Rediscovering Progressive HTML Rendering with Marko</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friday Links - December 5th]]></title>
    <link href="http://devex.github.io/blog/2014/12/09/friday-links-december-5th/"/>
    <updated>2014-12-09T04:41:03-05:00</updated>
    <id>http://devex.github.io/blog/2014/12/09/friday-links-december-5th</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://www.schneier.com/blog/archives/2014/12/corporations_mi.html">Schneier: Corporations Misusing Our Data</a></li>
<li><a href="https://codeascraft.com/2014/12/04/juggling-multiple-elasticsearch-instances-on-a-single-host/">Etsy: Juggling Multiple Elasticsearch Instances on a Single Host</a></li>
<li><a href="http://calendar.perfplanet.com/2014/http-2-0-is-coming-be-ready/">Performance Calendar: HTTP 2.0 is coming, be ready</a></li>
<li><a href="http://oobrien.com/2014/12/all-the-tweets/">Suprageography: All the Tweets</a></li>
<li><a href="https://github.com/blog/1933-introducing-organization-webhooks">Github: Introducing organization webhooks (finally)</a></li>
<li><a href="http://googlewebmastercentral.blogspot.com.es/2014/12/are-you-robot-introducing-no-captcha.html">Google: Are you a robot? Introducing “No CAPTCHA reCAPTCHA”</a></li>
<li><a href="http://randsinrepose.com/archives/the-qa-mindset">Rand: The QA Mindset</a></li>
<li><a href="https://aws.amazon.com/blogs/aws/simplified-reserved-instances/">AWS: Simplifying the EC2 Reserved Instance Model</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friday Links - November 28th]]></title>
    <link href="http://devex.github.io/blog/2014/12/02/friday-links-november-28th/"/>
    <updated>2014-12-02T10:26:10-05:00</updated>
    <id>http://devex.github.io/blog/2014/12/02/friday-links-november-28th</id>
    <content type="html"><![CDATA[<p>Here are last week&rsquo;s Friday Links. Enjoy!</p>

<ul>
<li><a href="http://www.meetup.com/Barcelona-Free-Software-Users-Hackers/events/218591509/">Meetup in Barcelona: A story about tanks, the UN and Python</a></li>
<li><a href="http://blog.codinghorror.com/because-reading-is-fundamental-2/">coding horror: Because Reading is Fundamental</a></li>
<li><a href="https://www.mattcutts.com/blog/premortem/">Matt Cutts: Premortems</a></li>
<li><a href="http://www.brucelawson.co.uk/2014/device-detection-responsive-web-design/">Device Detection vs Responsive Web Design</a></li>
<li><a href="http://samsaffron.com/archive/2014/12/01/speeding-up-rails-4-2">Speeding up Rails 4.2</a></li>
<li><a href="http://news.sciencemag.org/funding/2014/11/gates-foundation-require-immediate-free-access-journal-articles">Gates Foundation to require immediate free access for journal articles</a></li>
<li><a href="http://www.enterprisetech.com/2014/11/14/rare-peek-massive-scale-aws/">A Rare Peek Into The Massive Scale of AWS</a></li>
<li><a href="https://www.omniref.com/blog/blog/2014/11/18/ko1-at-rubyconf-2014-massive-garbage-collection-speedup-in-ruby-2-dot-2/">Ko1 at RubyConf 2014: Massive Garbage Collection Speedup in Ruby 2.2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One in a `has_many` - Access Special Association Objects in ActiveRecord]]></title>
    <link href="http://devex.github.io/blog/2014/11/24/one-in-a-has-many-access-special-association-objects-in-activerecord/"/>
    <updated>2014-11-24T09:12:48-05:00</updated>
    <id>http://devex.github.io/blog/2014/11/24/one-in-a-has-many-access-special-association-objects-in-activerecord</id>
    <content type="html"><![CDATA[<p>ActiveRecord models that define a <code>has_many</code> association often need access to a
specific entry of this list. Think of an user that has many email addresses but
only one that is his primary address. Or a Blog post with many comments of which
one is featured.</p>

<!-- more -->


<h2>How a lot of people do it</h2>

<p>A pattern that seems to be quite common is to
<a href="http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#module-ActiveRecord::Associations::ClassMethods-label-Association+extensions">extend the association by implementing a method that gets you the specific record</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:emails</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">primary</span>
</span><span class='line'>      <span class="n">find</span><span class="p">(</span><span class="ss">:first</span><span class="p">,</span> <span class="ss">conditions</span><span class="p">:</span> <span class="s1">&#39;is_primary&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows you to access the user&rsquo;s primary email address via <code>#emails.primary</code>.
So far so good, but what happens if we need to get a list of users with their
primary email address? Of course we do eager loading to reduce the amount of
database queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span>
</span><span class='line'>  <span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:emails</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span> <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">u</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">u</span><span class="o">.</span><span class="n">emails</span><span class="o">.</span><span class="n">primary</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But when we look at the SQL queries that are actually executed we realize that
eager loading is happening but each primary email is queried separately
afterwards:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;users&quot;</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">IN</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">6</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> <span class="mi">1</span> <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> <span class="mi">2</span> <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> <span class="mi">3</span> <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> <span class="mi">4</span> <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> <span class="mi">5</span> <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">LIMIT</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ouch! This will screw up our app&rsquo;s performance as the user base grows!</p>

<h2>A better way</h2>

<p>But there&rsquo;s another way of picking out one special instance of a <code>has_many</code>
association. A way that also allows eager loading. It&rsquo;s as simple as defining
just another association pointing to the same object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:emails</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:primary_email</span><span class="p">,</span> <span class="ss">class_name</span><span class="p">:</span> <span class="no">Email</span><span class="p">,</span> <span class="ss">conditions</span><span class="p">:</span> <span class="s1">&#39;is_primary&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can access the user&rsquo;s primary email address by <code>#primary_email</code>. Let&rsquo;s
check the SQL log for a user list using eager loading:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span>
</span><span class='line'>  <span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:primary_email</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span> <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">u</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">u</span><span class="o">.</span><span class="n">primary_email</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see eager loading is now working properly for the primary email
addresses:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;users&quot;</span>
</span><span class='line'><span class="ss">DEBUG</span><span class="p">:</span> <span class="no">Email</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="n">ms</span><span class="p">)</span> <span class="no">SELECT</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;emails&quot;</span>
</span><span class='line'>                          <span class="no">WHERE</span> <span class="s2">&quot;emails&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">IN</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>                          <span class="no">AND</span> <span class="p">(</span><span class="n">is_primary</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yay! Now all the millions of users out there can sign up on our page without
breaking the list of primary email addresses&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friday Links - November 21st]]></title>
    <link href="http://devex.github.io/blog/2014/11/24/friday-links-november-21st/"/>
    <updated>2014-11-24T04:45:03-05:00</updated>
    <id>http://devex.github.io/blog/2014/11/24/friday-links-november-21st</id>
    <content type="html"><![CDATA[<p>Every friday we pass each other some links that we read during the week and deem
worth sharing. Each monday we&rsquo;ll publish that list here on the Blog.</p>

<!-- more -->


<ul>
<li><a href="https://www.schneier.com/blog/archives/2014/11/a_new_free_ca.html">Schneier: New free CA</a></li>
<li><a href="http://googlewebmastercentral.blogspot.de/2014/11/helping-users-find-mobile-friendly-pages.html">Google: Helping users find mobile-friendly pages</a></li>
<li><a href="https://codeascraft.com/2014/11/17/personalized-recommendations-at-etsy/">Personalized Recommendations at Etsy</a></li>
<li><a href="https://www.mattcutts.com/blog/dial-tone-moments/">Matt Cutts: Dial tone moments</a></li>
<li><a href="https://aws.amazon.com/blogs/aws/track-aws-with-config/">Track AWS Resource Configurations With AWS Config</a></li>
<li><a href="https://aws.amazon.com/blogs/aws/code-management-and-deployment/">New AWS Tools for Code Management and Deployment</a></li>
<li><a href="http://weblog.rubyonrails.org/2014/11/19/Rails-4-0-11-1-and-4-1-7-1-have-been-released/">Rails 4.0.11.1 and 4.1.7.1 have been released</a></li>
<li><a href="http://techblog.netflix.com/2014/11/nodejs-in-flames.html">Netflix: Node.js in Flames</a></li>
<li><a href="http://nerds.airbnb.com/maintaining-quality-scale/">Airbnb: Maintaining Quality at Scale</a></li>
<li><a href="http://nerds.airbnb.com/testing-at-airbnb/">Airbnb: Testing</a></li>
<li><a href="http://nerds.airbnb.com/experiments-at-airbnb/">Airbnb: Experiments</a></li>
<li><a href="http://nerds.airbnb.com/openair-algorithmic-pricing/">Airbnb: Algorithmic pricing</a></li>
<li><a href="https://gigaom.com/2014/06/30/the-dark-side-of-io-how-the-u-k-is-making-web-domain-profits-from-a-shady-cold-war-land-deal/">The dark side of .io: How the U.K. is making web domain profits from a shady Cold War land deal</a></li>
<li><a href="https://developer.github.com/guides/traversing-with-pagination/">Traversing with Pagination</a></li>
<li><a href="http://www.theguardian.com/world/2014/nov/09/berlins-digital-exiles-tech-activists-escape-nsa">Berlin’s digital exiles: where tech activists go to escape the NSA</a></li>
<li>7 Rules for Creating Gorgeous UI - <a href="https://medium.com/@erikdkennedy/7-rules-for-creating-gorgeous-ui-part-1-559d4e805cda">Part 1</a> and <a href="https://medium.com/@erikdkennedy/7-rules-for-creating-gorgeous-ui-part-2-430de537ba96">Part 2</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
